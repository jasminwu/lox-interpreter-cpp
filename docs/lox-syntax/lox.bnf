# A REPRESENTATION OF LOX SYNTAX
# AMBIGUOUS VERSION

# STATEMENTS
program     ::= statement* EOF;
statement   ::= exprStmt | printStmt;

exprStmt    ::= expression ";";
printStmt   ::= "print" expression ";";

# EXPRESSIONS V1
expression  ::= literal | unary | binary | grouping;
literal     ::= NUMBER | STRING | bool | nil;
grouping    ::= "(" expression ")";
unary       ::= operator_1 expression;
binary      ::= expression operator_2 expression;
bool        ::= "true" | "false";
operator_1  ::= "-" | "!";
operator_2  ::= "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/";

## EXPRESSIONS V2 (to handle ambiguity)
# LOWEST PRECEDENCE
expression  ::= equality;
equality    ::= comparison (("!=" | "==") comparison)*;
comparison  ::= term ((">" | ">=" | "<" | "<=") term)*;
term        ::= factor (("-" | "+") factor)*;
factor      ::= factor ("/" | "*") unary | unary; # left associative
unary       ::= ("!" | "-") unary | primary;      # right associative
primary     ::= NUMBER | STRING | "true" | "false" | "nul " | "(" expression ")";
# HIGHEST PRECEDENCE